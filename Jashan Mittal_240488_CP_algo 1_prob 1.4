#include <stdio.h>
/* logic I used for this problem is quite simple. Say you choose any three elements from a set none of which is 1. then by PHP at least two of them have same parity with respect to two that means you can always two numbers from such a set of three or more numbers such that there sum is an even number other than 2 which in every case is a composite number.if my array has any element 1 in it I have constructed another array with no 1s in it. an then have approached it. the rest of excluded cases are where there are only 1,2 or none non 1 elements which can be solved separately. the code seems lengthy but I have copied and pasted in most parts. Iy passed 4 test cases only but i didn't have time to find an error so I am submitting this only.*/ 
#include <math.h>
int check(int x);
int main(){
    int t;
    scanf("%d",&t);
    for(int j=1;j<=t;j++){
        int n;
        scanf("%d",&n);
        int arr[n];
        for(int i=0;i<n;i++){
            scanf("%d",&arr[i]);
        }
        int count=0;
        for(int i=0;i<n;i++){
            if(arr[i]==1){
                count++;
            }
        }
        //removing 1s from the set
        int arb[n-count];
        int a=0;
        for(int i=0;i<n;i++){
            if(arr[i]!=1){
                arb[a]=arr[i];
                a++;
            }
        int x=0;
        int y=0;
        }
        //more than 3 elements in new array
        if((n-count)>2){
            int x=0;
            int y=0;
            if((arb[0]%2)==(arb[1]%2)){
                while(arr[x]!=arb[0]){
                    x=x+1;
                }
                y=x+1;
                while(arr[y]!=arb[1]){
                    y=y+1;
                }
            }
            else if((arb[0]%2)==(arb[2]%2)){
                while(arr[x]!=arb[0]){
                    x=x+1;
                }
                y=x+1;
                while(arr[y]!=arb[2]){
                    y=y+1;
                }
            }
            else{
                while(arr[x]!=arb[1]){
                    x=x+1;
                }
                y=x+1;
                while(arr[y]!=arb[2]){
                    y=y+1;
                }
            }
            printf("%d %d\n",x+1,y+1);
        }
        //for 2 elemnts it's good if bot of them add to a composite else check for the number after adding 1
        else if(n-count==2){
            int x=0;
            int y=0;
            int a=check(arb[0]+arb[1]);
            if(a==1){
                while(arr[x]!=arb[0]){
                    x=x+1;
                }
                y=x+1;
                while(arr[y]!=arb[1]){
                    y=y+1;
                }
                printf("%d %d\n",x+1,y+1);
            }
            else if(n>2){
                while(arr[x]!=arb[0]){
                    x=x+1;
                }
                while(arr[y]!=1){
                    y=y+1;
                }
               
                printf("%d %d\n",x+1,y+1);
            }
            else{
                printf("-1\n");
            }
        }
        else if(n-count==1){
            int x=0;
            int y=0;
            int a=check(1+arb[0]);
            if(a==1){
                while(arr[x]!=arb[0]){
                    x=x+1;
                }
                while(arr[y]!=1){
                    y=y+1;
                }
                printf("%d %d\n",x+1,y+1);
                
            }
            else{
                printf("-1\n");
            }
        }
        else{
            printf("-1\n");
        }
    }
    
}
//function for checking if anumber is prime
int check(int x){
    int b=sqrt(x);
    int c=0;
    for(int i=2;i<=b;i++){
        if(x%i==0){
            c=1;
            break;
        }
        if(c==1){
            break;
        }
    }
    return c;
}
